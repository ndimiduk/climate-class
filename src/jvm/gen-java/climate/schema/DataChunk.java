/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package climate.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataChunk implements org.apache.thrift.TBase<DataChunk, DataChunk._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataChunk");

  private static final org.apache.thrift.protocol.TField DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataset", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PIXEL_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("pixelLocation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CHUNK_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkValue", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TEMPORAL_RES_FIELD_DESC = new org.apache.thrift.protocol.TField("temporalRes", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.I32, (short)5);

  public String dataset;
  public ModisPixelLocation pixelLocation;
  public DataValue chunkValue;
  public String temporalRes;
  public int period;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATASET((short)1, "dataset"),
    PIXEL_LOCATION((short)2, "pixelLocation"),
    CHUNK_VALUE((short)3, "chunkValue"),
    TEMPORAL_RES((short)4, "temporalRes"),
    PERIOD((short)5, "period");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATASET
          return DATASET;
        case 2: // PIXEL_LOCATION
          return PIXEL_LOCATION;
        case 3: // CHUNK_VALUE
          return CHUNK_VALUE;
        case 4: // TEMPORAL_RES
          return TEMPORAL_RES;
        case 5: // PERIOD
          return PERIOD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PERIOD_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATASET, new org.apache.thrift.meta_data.FieldMetaData("dataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIXEL_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("pixelLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModisPixelLocation.class)));
    tmpMap.put(_Fields.CHUNK_VALUE, new org.apache.thrift.meta_data.FieldMetaData("chunkValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataValue.class)));
    tmpMap.put(_Fields.TEMPORAL_RES, new org.apache.thrift.meta_data.FieldMetaData("temporalRes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataChunk.class, metaDataMap);
  }

  public DataChunk() {
  }

  public DataChunk(
    String dataset,
    ModisPixelLocation pixelLocation,
    DataValue chunkValue,
    String temporalRes)
  {
    this();
    this.dataset = dataset;
    this.pixelLocation = pixelLocation;
    this.chunkValue = chunkValue;
    this.temporalRes = temporalRes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataChunk(DataChunk other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetDataset()) {
      this.dataset = other.dataset;
    }
    if (other.isSetPixelLocation()) {
      this.pixelLocation = new ModisPixelLocation(other.pixelLocation);
    }
    if (other.isSetChunkValue()) {
      this.chunkValue = new DataValue(other.chunkValue);
    }
    if (other.isSetTemporalRes()) {
      this.temporalRes = other.temporalRes;
    }
    this.period = other.period;
  }

  public DataChunk deepCopy() {
    return new DataChunk(this);
  }

  @Override
  public void clear() {
    this.dataset = null;
    this.pixelLocation = null;
    this.chunkValue = null;
    this.temporalRes = null;
    setPeriodIsSet(false);
    this.period = 0;
  }

  public String getDataset() {
    return this.dataset;
  }

  public DataChunk setDataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

  public void unsetDataset() {
    this.dataset = null;
  }

  /** Returns true if field dataset is set (has been assigned a value) and false otherwise */
  public boolean isSetDataset() {
    return this.dataset != null;
  }

  public void setDatasetIsSet(boolean value) {
    if (!value) {
      this.dataset = null;
    }
  }

  public ModisPixelLocation getPixelLocation() {
    return this.pixelLocation;
  }

  public DataChunk setPixelLocation(ModisPixelLocation pixelLocation) {
    this.pixelLocation = pixelLocation;
    return this;
  }

  public void unsetPixelLocation() {
    this.pixelLocation = null;
  }

  /** Returns true if field pixelLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetPixelLocation() {
    return this.pixelLocation != null;
  }

  public void setPixelLocationIsSet(boolean value) {
    if (!value) {
      this.pixelLocation = null;
    }
  }

  public DataValue getChunkValue() {
    return this.chunkValue;
  }

  public DataChunk setChunkValue(DataValue chunkValue) {
    this.chunkValue = chunkValue;
    return this;
  }

  public void unsetChunkValue() {
    this.chunkValue = null;
  }

  /** Returns true if field chunkValue is set (has been assigned a value) and false otherwise */
  public boolean isSetChunkValue() {
    return this.chunkValue != null;
  }

  public void setChunkValueIsSet(boolean value) {
    if (!value) {
      this.chunkValue = null;
    }
  }

  public String getTemporalRes() {
    return this.temporalRes;
  }

  public DataChunk setTemporalRes(String temporalRes) {
    this.temporalRes = temporalRes;
    return this;
  }

  public void unsetTemporalRes() {
    this.temporalRes = null;
  }

  /** Returns true if field temporalRes is set (has been assigned a value) and false otherwise */
  public boolean isSetTemporalRes() {
    return this.temporalRes != null;
  }

  public void setTemporalResIsSet(boolean value) {
    if (!value) {
      this.temporalRes = null;
    }
  }

  public int getPeriod() {
    return this.period;
  }

  public DataChunk setPeriod(int period) {
    this.period = period;
    setPeriodIsSet(true);
    return this;
  }

  public void unsetPeriod() {
    __isset_bit_vector.clear(__PERIOD_ISSET_ID);
  }

  /** Returns true if field period is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriod() {
    return __isset_bit_vector.get(__PERIOD_ISSET_ID);
  }

  public void setPeriodIsSet(boolean value) {
    __isset_bit_vector.set(__PERIOD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATASET:
      if (value == null) {
        unsetDataset();
      } else {
        setDataset((String)value);
      }
      break;

    case PIXEL_LOCATION:
      if (value == null) {
        unsetPixelLocation();
      } else {
        setPixelLocation((ModisPixelLocation)value);
      }
      break;

    case CHUNK_VALUE:
      if (value == null) {
        unsetChunkValue();
      } else {
        setChunkValue((DataValue)value);
      }
      break;

    case TEMPORAL_RES:
      if (value == null) {
        unsetTemporalRes();
      } else {
        setTemporalRes((String)value);
      }
      break;

    case PERIOD:
      if (value == null) {
        unsetPeriod();
      } else {
        setPeriod((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATASET:
      return getDataset();

    case PIXEL_LOCATION:
      return getPixelLocation();

    case CHUNK_VALUE:
      return getChunkValue();

    case TEMPORAL_RES:
      return getTemporalRes();

    case PERIOD:
      return new Integer(getPeriod());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATASET:
      return isSetDataset();
    case PIXEL_LOCATION:
      return isSetPixelLocation();
    case CHUNK_VALUE:
      return isSetChunkValue();
    case TEMPORAL_RES:
      return isSetTemporalRes();
    case PERIOD:
      return isSetPeriod();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataChunk)
      return this.equals((DataChunk)that);
    return false;
  }

  public boolean equals(DataChunk that) {
    if (that == null)
      return false;

    boolean this_present_dataset = true && this.isSetDataset();
    boolean that_present_dataset = true && that.isSetDataset();
    if (this_present_dataset || that_present_dataset) {
      if (!(this_present_dataset && that_present_dataset))
        return false;
      if (!this.dataset.equals(that.dataset))
        return false;
    }

    boolean this_present_pixelLocation = true && this.isSetPixelLocation();
    boolean that_present_pixelLocation = true && that.isSetPixelLocation();
    if (this_present_pixelLocation || that_present_pixelLocation) {
      if (!(this_present_pixelLocation && that_present_pixelLocation))
        return false;
      if (!this.pixelLocation.equals(that.pixelLocation))
        return false;
    }

    boolean this_present_chunkValue = true && this.isSetChunkValue();
    boolean that_present_chunkValue = true && that.isSetChunkValue();
    if (this_present_chunkValue || that_present_chunkValue) {
      if (!(this_present_chunkValue && that_present_chunkValue))
        return false;
      if (!this.chunkValue.equals(that.chunkValue))
        return false;
    }

    boolean this_present_temporalRes = true && this.isSetTemporalRes();
    boolean that_present_temporalRes = true && that.isSetTemporalRes();
    if (this_present_temporalRes || that_present_temporalRes) {
      if (!(this_present_temporalRes && that_present_temporalRes))
        return false;
      if (!this.temporalRes.equals(that.temporalRes))
        return false;
    }

    boolean this_present_period = true && this.isSetPeriod();
    boolean that_present_period = true && that.isSetPeriod();
    if (this_present_period || that_present_period) {
      if (!(this_present_period && that_present_period))
        return false;
      if (this.period != that.period)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_dataset = true && (isSetDataset());
    builder.append(present_dataset);
    if (present_dataset)
      builder.append(dataset);

    boolean present_pixelLocation = true && (isSetPixelLocation());
    builder.append(present_pixelLocation);
    if (present_pixelLocation)
      builder.append(pixelLocation);

    boolean present_chunkValue = true && (isSetChunkValue());
    builder.append(present_chunkValue);
    if (present_chunkValue)
      builder.append(chunkValue);

    boolean present_temporalRes = true && (isSetTemporalRes());
    builder.append(present_temporalRes);
    if (present_temporalRes)
      builder.append(temporalRes);

    boolean present_period = true && (isSetPeriod());
    builder.append(present_period);
    if (present_period)
      builder.append(period);

    return builder.toHashCode();
  }

  public int compareTo(DataChunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DataChunk typedOther = (DataChunk)other;

    lastComparison = Boolean.valueOf(isSetDataset()).compareTo(typedOther.isSetDataset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataset, typedOther.dataset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPixelLocation()).compareTo(typedOther.isSetPixelLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPixelLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pixelLocation, typedOther.pixelLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunkValue()).compareTo(typedOther.isSetChunkValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkValue, typedOther.chunkValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemporalRes()).compareTo(typedOther.isSetTemporalRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemporalRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temporalRes, typedOther.temporalRes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriod()).compareTo(typedOther.isSetPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, typedOther.period);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // DATASET
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.dataset = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PIXEL_LOCATION
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.pixelLocation = new ModisPixelLocation();
            this.pixelLocation.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CHUNK_VALUE
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.chunkValue = new DataValue();
            this.chunkValue.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TEMPORAL_RES
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.temporalRes = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PERIOD
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.period = iprot.readI32();
            setPeriodIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.dataset != null) {
      oprot.writeFieldBegin(DATASET_FIELD_DESC);
      oprot.writeString(this.dataset);
      oprot.writeFieldEnd();
    }
    if (this.pixelLocation != null) {
      oprot.writeFieldBegin(PIXEL_LOCATION_FIELD_DESC);
      this.pixelLocation.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.chunkValue != null) {
      oprot.writeFieldBegin(CHUNK_VALUE_FIELD_DESC);
      this.chunkValue.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.temporalRes != null) {
      oprot.writeFieldBegin(TEMPORAL_RES_FIELD_DESC);
      oprot.writeString(this.temporalRes);
      oprot.writeFieldEnd();
    }
    if (isSetPeriod()) {
      oprot.writeFieldBegin(PERIOD_FIELD_DESC);
      oprot.writeI32(this.period);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataChunk(");
    boolean first = true;

    sb.append("dataset:");
    if (this.dataset == null) {
      sb.append("null");
    } else {
      sb.append(this.dataset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pixelLocation:");
    if (this.pixelLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.pixelLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunkValue:");
    if (this.chunkValue == null) {
      sb.append("null");
    } else {
      sb.append(this.chunkValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("temporalRes:");
    if (this.temporalRes == null) {
      sb.append("null");
    } else {
      sb.append(this.temporalRes);
    }
    first = false;
    if (isSetPeriod()) {
      if (!first) sb.append(", ");
      sb.append("period:");
      sb.append(this.period);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

